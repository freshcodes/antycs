{"name":"antycs","tagline":"Organize and simplify your analytics event trapping related code.","body":"# Overview\r\n\r\nThere are many third party components included in most web sites these days. Components such as embedded YouTube videos or Facebook Like buttons. Most of these services are isolated in an iFrame but do provide an API to interact with. Unfortunately all these APIs are quite different.\r\n\r\nThe antycs library focuses on providing a simple and consistent API to watch how your users are interacting with these components. You can easily pair your preferred analytics tracking software with antycs.\r\n\r\nThe primary method used is called `antycs.watch` and it allows you to watch for specific events with a specific target. The events you can watch for depends on which plugins you include. The default plugin provides DOM related event functionality such as `click` and `submit` events. Other events exposed by plugins are namespaced with the plugins name and then the type of event. For instance the Twitter plugin allows you to watch for `twitter.retweet` and other related Twitter events exposed by the Twitter Web Intents API. You can also watch for any Twitter events by only watching for `twitter`.\r\n\r\n## Examples\r\n\r\nThere are several examples in the examples directory that illustrate how to use `antycs`. Here is a glimpse of how it can be used:\r\n\r\n    antycs\r\n        .watch('click', '.track', function(event) {\r\n            // code to handle a click on anything\r\n            // with the class .track in the document\r\n        })\r\n        .watch('submit', '.track', function(event) {\r\n            // code to handle a submit event on anything\r\n            // with the class .track in the document\r\n        });\r\n\r\nIf you load one of the other plugins such as the Twitter plugin you can watch for other types of events as well.\r\n\r\n    antycs\r\n        .watch('twitter.follow', '.track', function(event) {\r\n            // code to handle a twitter follow event\r\n            // from a twitter follow button with the\r\n            // class of .track\r\n        });\r\n\r\nYou can find the data Twitter exposes with these events by reviewing [their documentation](https://dev.twitter.com/docs/tfw-javascript).\r\n\r\n\r\n## API\r\n\r\n### `antycs.watch(event, target, handler)`\r\n\r\nThe events that can be watched for depends on what plugins are loaded. The target is typically a CSS selector for most situations. Some third party APIs are not as flexible and require targeting against a different parameter such as a URI for the Facebook plugin. This method is chainable.\r\n\r\n### `antycs.error(message)`\r\n\r\nUsed when antycs cannot do something it expected to be able to do.\r\n\r\n### `antycs.dom.matches(element, selector)`\r\n\r\nThis is used to facilitate event delegation based on a selector. There are currently two implementations: a native and jQuery based implementation. It simply takes an element and a selector and returns true or false if the selector matches the element or not.\r\n\r\n### `antycs.dom.on(type, target, handler)`\r\n\r\nThis is used to facilitate event delegation based on a selector. There are currently two implementations; a native and jQuery based implementation. It simply takes an event type, a target which is a CSS selector, and a handler.\r\n\r\n### `antycs.event.stopPropagation(event)`\r\n\r\nThis is used to control event propagation for antycs based events. Sets a property on the event that says it should not propagate. This is called by default and can be overridden by calling `antycs.event.allowPropagation` in the event handler.\r\n\r\n### `antycs.event.isPropagationStopped(event)`\r\n\r\nThis is used to control event propagation for antycs based events. Returns true or false if the event is set to propagate or not.\r\n\r\n### `antycs.event.allowPropagation(event)`\r\n\r\nThis is used to control event propagation for antycs based events. Sets a property on the event that says it should propagate. This can be overridden by calling `antycs.event.stopPropagation` in the event handler.\r\n\r\n\r\n## Plugins\r\n\r\n### Default\r\n\r\nThe `target` argument to `antycs.watch` is not required. If you do not pass a target then you'll get all the watched events that bubble up to the document. If you do pass a `target` then it should be in the form of a CSS selector.\r\n\r\nThe default plugin allows for tracking of DOM related events. It adds a slight delay to some link clicks and form submits by default.\r\n\r\n### Twitter\r\n\r\nThe `target` argument to `antycs.watch` is not required. If you do not pass a target then you'll get all the watched events from the entire site. If you do pass a `target` then it should be in the form of a CSS selector.\r\n\r\nIf you are using some twitter buttons on your site then you can listen for some events that are exposed by Twitter. Here is a list of what this plugin supports listening to:\r\n\r\n * `click`\r\n * `tweet`\r\n * `retweet`\r\n * `follow`\r\n * `unfollow`\r\n * `favorite`\r\n\r\nTo watch for these events simply prefix them with `twitter.` such as: `antycs.watch('twitter.click', ...)`. You can also watch for all the events by only watching for `twitter` such as: `antycs.watch('twitter', ...)`.\r\n\r\n\r\n### Facebook\r\n\r\nThis uses the [Facebook JavaScript SDK](https://developers.facebook.com/docs/web/gettingstarted/). There are two examples in the examples directory related to the Facebook plugin on how to initialize it.\r\n\r\nThe `target` argument to `antycs.watch` is not required. If you pass a `target` it should be the url associated with the button. For example you could target a like to a specific url.\r\n\r\n```js\r\nantycs.watch('facebook.like', 'http://target.uri/', function(event) { ... });\r\n```\r\n\r\nIf you are using the HTML5 like/send buttons then you can watch for the following events:\r\n\r\n * `like`\r\n * `unlike`\r\n * `send`\r\n\r\n\r\n### YouTube\r\n\r\nThe `target` argument to `antycs.watch` is required and must be a string that is the id of the player you are wanting to watch. So if you had the following player:\r\n\r\n```html\r\n<iframe id=\"exampleplayer\" type=\"text/html\" width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/I6OXjnBIW-4?enablejsapi=1\"...\r\n```\r\n\r\n\r\nThen you could watch the events from this play by using the follow snippet.\r\n\r\n```js\r\nantycs.watch('youtube.play', 'exampleplayer', function(event) { ... });\r\n```\r\n\r\nIf you are embedding videos via the iframe method from YouTube then you can listen for these events.\r\n\r\n * `play`\r\n * `pause`\r\n * `end`\r\n * `buffer`\r\n * `cue`\r\n * `qualitychange`\r\n * `ratechange`\r\n * `error`\r\n\r\nTo watch for these events simply prefix them with `youtube.` such as: `antycs.watch('youtube.play', ...)`. You can always watch for all the events by only watching for `youtube` such as: `antycs.watch('youtube', ...)`.\r\n\r\n\r\n## License\r\n\r\n`antycs` is licensed under the MIT (LICENSE.txt) license.\r\n\r\nCopyright (c) 2013 Fresh Codes LLC\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}